#############################################################################
#          Rules to generate coverage files given bed features.             #
#                                                                           #
# Date: 02.01.2015                                                          #
#                                                                           #
#############################################################################

rule target_coverage:
    """Compute per base coverage of sequenced regions."""
    input:
        ref = "results/annotation/featureCounts{parameterSet}/{mapper}/{ref}/{kind}/generated_manifest_{bef}_{aft}.bed",
        bams = lambda wildcards: expand("results/mapping/" + wildcards.mapper + wildcards.parameterSet + "/" + wildcards.ref + "/" + wildcards.kind + "/{unit}_coord.bam", unit = config["samples"][wildcards.sample])          
    output: "results/coverage/{mapper}{parameterSet}/{ref}/{kind}/{sample}_{bef}_{aft}.cov"
    # threads: 15
    run:
        if len(input.bams) == 1:
            command = "cat"
        else:
            command = "samtools merge -"
        shell("{command} {input.bams} | samtools view -bh -F 1024 | /usr/local/bin/bedtools2-2.22.1/bin/bedtools coverage -split -d -abam stdin -b {input.ref} > {output}")

rule generate_manifest:
    """Generate a manifest-like bed-file. Contains covered regions"""
    input:
        ensembl = lambda wildcards: config["ref_dir"] + re.sub('\.(gff3|gtf|bed)$', '.db', config["references"][wildcards.ref]["genome_annotation"]),
        count = "results/de/featureCounts{parameterSet}/{mapper}/{ref}/{kind}/all.counts"
    output: "results/annotation/featureCounts{parameterSet}/{mapper}/{ref}/{kind}/generated_manifest.bed"
    # threads: 15
	run:
		import gffutils
		genes = []
		with open(input.count) as counts_file:
			for line in counts_file:
				if not (line[0] == '#' or line[:6] == "Geneid"):
					split_line = line.rstrip().split("\t")
					if sum(map(int, split_line[6:])) > 300:
						genes.append(split_line[0])

		with open(output[0], "w+") as manifest:
			ensembl_db = gffutils.FeatureDB(input.ensembl)
			for gene in genes:
				if "protein_coding" in ensembl_db[gene]["gene_biotype"]:
					for transcript in ensembl_db.children(gene, featuretype='transcript'):
						if 'ccds_id' in transcript.attributes:
							for CDS in ensembl_db.children(transcript, featuretype='CDS'):
								manifest.write( "chr" + CDS.seqid + "\t" + str(CDS.start) + "\t" + str(CDS.end) + "\t" + CDS["transcript_id"][0] + "-" + CDS["exon_number"][0] + "-" + CDS["gene_name"][0] + "\n" )

rule target_bad_coverage:
    """Only output Regions under a given covergae"""
    input: "results/coverage/{mapper}{parameterSet}/{ref}/{kind}/{sample}_{bef}_{aft}.cov"
    output: "results/coverage/{mapper}{parameterSet}/{ref}/{kind}/{sample}_{bef,\d+}_{aft,\d+}.lower{mincov,\d+}"
    shell: """cat {input} | awk '$6 < {wildcards.mincov}' | awk '{{print $4 "\t" $5 "\t" $5}}' | sort -k1,1 -k2,2n | bedtools merge -d 5 | awk '{{print $1 "\t" $2-19 "\t" $3-19}}' > {output}"""

rule target_coverage_hist:
    """Compute per base coverage of sequenced regions."""
    input:
        bams = lambda wildcards: expand("results/mapping/" + wildcards.mapper + wildcards.parameterSet + "/" + wildcards.ref + "/" + wildcards.kind + "/{unit}_coord_dedup.bam", unit = config["samples"][wildcards.sample]),
        manifest = "results/annotation/featureCounts/{mapper}{parameterSet}/{ref}/{kind}/generated_manifest_{bef}_{aft}.bed"
    output: "results/coverage/{mapper}{parameterSet}/{ref}/{kind}/{sample}_{bef}_{aft}.hist"
    # threads: 15
    run:
        if len(input.bams) == 1:
            command = "cat"
        else:
            command = "samtools merge -"
        shell("{command} {input.bams} | samtools view -bh -F 1024 | /usr/local/bin/bedtools2-2.22.1/bin/bedtools coverage -hist -abam stdin -b {input.manifest} | grep ^all > {output}")

rule target_gene_coverage:
    """Compute per base coverage of sequenced regions."""
    input:
        bams = lambda wildcards: expand("results/mapping/" + wildcards.mapper + wildcards.parameterSet + "/" + wildcards.ref + "/" + wildcards.kind + "/{unit}_coord_dedup.bam", unit = config["samples"][wildcards.sample]),
        manifest = config["ref_dir"] + "/{ref}/genes/diagnostic_genes_{bef}_{aft}.bed"
    output: "results/coverage/{mapper}{parameterSet}/{ref}/{kind}/{sample}_diagnostics_{bef}_{aft}.hist"
    # threads: 15
    run:
        if len(input.bams) == 1:
            command = "cat"
        else:
            command = "samtools merge -"
        shell("{command} {input.bams} | samtools view -bh -F 1024 | /usr/local/bin/bedtools2-2.22.1/bin/bedtools coverage -hist -abam stdin -b {input.manifest} | grep ^all > {output}")
