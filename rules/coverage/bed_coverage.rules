#############################################################################
#          Rules to generate coverage files given bed features.             #
#                                                                           #
# Date: 02.01.2015                                                          #
#                                                                           #
#############################################################################

rule target_coverage:
    """Compute per base coverage of sequenced regions."""
    input:
        ref = "results/annotation/featureCounts/{mapper}/{ref}/{kind}/generated_manifest_{bef}_{aft}.bed",
        bams = lambda wildcards: expand("results/mapping/" + wildcards.mapper + "/" + wildcards.ref + "/" + wildcards.kind + "/{unit}_coord.bam", unit = config["samples"][wildcards.sample])          
    output: "results/coverage/{mapper}/{ref}/{kind}/{sample}_{platform}_{manifest}_{bef}_{aft}.cov"
    # threads: 15
    run:
        if len(input.bams) == 1:
            command = "cat"
        else:
            command = "samtools merge -"
        shell("{command} {input.bams} | /usr/local/bin/bedtools2-2.22.1/bin/bedtools coverage -split -d -abam stdin -b {input.ref} > {output}")

rule generate_manifest:
    """Generate a manifest-like bed-file. Contains covered regions"""
    input:
        ensembl = config["ref_dir"] + "/human/{ref}/genes/all.gtf",
        count = "results/de/featureCounts/{mapper}/{ref}/{kind}/all.counts"
    output: "results/annotation/featureCounts/{mapper}/{ref}/{kind}/generated_manifest.bed"
    # threads: 15
    shell: """
	    cat {input.count} | grep -v '^#' | awk '{{t=0; for(i=7;i<=NF;i++){{t+=$i}}; if(t>300) print $1;}}' | grep -f - {input.ensembl} | grep -P 'protein_coding\tCDS' | grep 'tag "CCDS";' | awk '{{gsub(/[;"]/, "");gsub(/-/,"",$16); print "chr" $1 "\t" $4 "\t" $5 "\t" $12 "-" $14 "-" $16;}}' > {output};
        grep 'chrM' /data/references/human/hg19/genes/all.gtf | grep -P 'protein_coding\tCDS' | awk '{{gsub(/[;"]/, "");gsub(/-/,"",$16); print $1 "\t" $4 "\t" $5 "\t" $12 "-" $14 "-" $16;}}' >> {output}
       	"""

rule target_bad_coverage:
    """Only output Regions under a given covergae"""
    input: "results/coverage/{mapper}/{ref}/{kind}/{sample}_{platform}_{manifest}_{bef}_{aft}.cov"
    output: "results/coverage/{mapper}/{ref}/{kind}/{sample}_{platform}_{manifest}_{bef}_{aft}.lower{mincov}"
    shell: """cat {input} | awk '$6 < {wildcards.mincov}' | awk '{{print $4 "\t" $5 "\t" $5}}' | sort -k1,1 -k2,2n | bedtools merge -d 5 | awk '{{print $1 "\t" $2-19 "\t" $3-19}}' > {output}"""

rule target_coverage_hist:
    """Compute per base coverage of sequenced regions."""
    input:
        bams = lambda wildcards: expand("results/mapping/" + wildcards.mapper + "/" + wildcards.ref + "/" + wildcards.kind + "/{unit}_coord.bam", unit = config["samples"][wildcards.sample]),
        manifest = "results/annotation/featureCounts/{mapper}/{ref}/{kind}/generated_manifest_{bef}_{aft}.bed"
    output: "results/coverage/{mapper}/{ref}/{kind}/{sample}_{platform}_{manifest}_{bef}_{aft}.hist"
    # threads: 15
    run:
        if len(input.bams) == 1:
            command = "cat"
        else:
            command = "samtools merge -"
        shell("{command} {input.bams} | /usr/local/bin/bedtools2-2.22.1/bin/bedtools coverage -hist -abam stdin -b {input.manifest} | grep ^all > {output}")
