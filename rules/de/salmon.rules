rule salmon:
	input:
		bams = lambda wildcards: expand("results/mapping/star" + wildcards.parameterSet + "/" + wildcards.genome + "/" + wildcards.kind + "/{unit}/Aligned.toTranscriptome.out_coord.bam", unit = config['samples'][wildcards.sample]),
		transcriptome = config["ref_dir"] + config["salmon_fasta"],
		gtf = config["ref_dir"] + config["genome_annotation"]
	output:
		"results/de/salmon{parameterSet}/{genome}/{kind}/{sample}/quant.sf",
		"results/de/salmon{parameterSet}/{genome}/{kind}/{sample}/quant.genes.sf"
	version: subprocess.check_output("salmon --version", shell=True)
	threads: 15
	params:
		"--libType A",
		"--output  results/de/salmon{parameterSet}/{genome}/{kind}/{sample}",
		"--gcBias",
		"--seqBias",
		"--useErrorModel",
		"--numBootstraps 1000",
		user = lambda wildcards: getParams("salmon", wildcards.parameterSet)
	run:
		import tempfile
		if len(input.bams) == 1:
			bam_file = input.bams[0]
		else:
			bam_file = tempfile.mkstemp(prefix="./", suffix=".bam")[1]
			shell("samtools merge -f {bam_file} {input.bams}")

		shell("salmon quant --threads {threads} --targets {input.transcriptome} --alignments {bam_file} --geneMap {input.gtf} {params}")

		if len(input.bams) > 1:
			os.remove(bam_file)
