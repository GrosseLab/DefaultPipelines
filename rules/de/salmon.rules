rule salmon:
	input:
		bams = lambda wildcards: expand("results/mapping/star" + wildcards.parameterSet + "/" + wildcards.ref + "/" + wildcards.kind + "/{unit}/Aligned.toTranscriptome.out.bam", unit = config['samples'][wildcards.sample]),
		transcriptome = lambda wildcards: config["ref_dir"] + config["references"][wildcards.ref]["transcriptome"],
		gtf = lambda wildcards: config["ref_dir"] + config["references"][wildcards.ref]["genome_annotation"]
	output:
		"results/de/salmon{parameterSet}/{ref}/{kind}/{sample}/quant.sf",
		"results/de/salmon{parameterSet}/{ref}/{kind}/{sample}/quant.genes.sf"
	# version: subprocess.check_output("salmon --version", shell=True)
	threads: 16
	params:
		"--libType A",
		"--output results/de/salmon{parameterSet}/{ref}/{kind}/{sample}",
		"--gcBias",
		"--seqBias",
		"--numBootstraps 1000",
		user = lambda wildcards: getParams("salmon", wildcards.parameterSet)
	conda:
		"../../envs/salmon.yaml"
	script:
		"salmon.py"

rule salmon_tables:
	input: expand("results/de/salmon{{parameterSet}}/{{ref}}/{{kind}}/{sample}/quant{{genes}}.sf", sample = config["samples"].keys())
	output:
		"results/de/salmon{parameterSet}/{ref}/{kind}/Length{genes}.tsv",
		"results/de/salmon{parameterSet}/{ref}/{kind}/EffectiveLength{genes}.tsv",
		"results/de/salmon{parameterSet}/{ref}/{kind}/TPM{genes}.tsv",
		"results/de/salmon{parameterSet}/{ref}/{kind}/NumReads{genes}.tsv"
	wildcard_constraints:
		genes = "(.genes)?"
	threads: 1
	run:
		data = []
		names = []

		samples = []
		for index in range(0, len(input)):
			samples.append(input[index].split("/")[5])

		for index in range(0, len(input)):
			with open(input[index], 'r') as file:
				data.append({})
				file.readline()
				for line in file:
					elements = line.rstrip().split(sep='\t')
					data[index][elements[0]] = elements[1:len(elements)]
					if index == 0:
						names.append(elements[0])

		for outindex in range(0, len(output)):
			with open(output[outindex], 'w') as out:
				out.write("\t" + "\t".join(samples) + "\n" )
				for gene in names:
					out.write(gene)
					for index in range(0, len(input)):
						out.write("\t" + data[index][gene][outindex])
					out.write("\n")
