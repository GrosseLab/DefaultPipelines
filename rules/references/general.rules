def annotation_to_ref(annotation):
	print(annotation)
	for ref in config["references"].keys():
		if config["references"][ref]["genome_annotation"] == annotation:
			return(ref)

rule genes_gffutils_create_db_gtf:
	input: "{path}.gtf"
	output: "{path}.db"
	run:
		import gffutils
		gffutils.create_db(input[0], dbfn=output[0], disable_infer_transcripts=True, disable_infer_genes=True, force=True)

rule genes_gffutils_create_db_gff3:
	input: "{path}.gff3"
	output: "{path}.db"
	run:
		import gffutils
		gffutils.create_db(input[0], dbfn=output[0], disable_infer_transcripts=True, disable_infer_genes=True, force=True)

rule extract_transcriptome_seq:
	input:
		genome = lambda wildcards: config["ref_dir"] + config["references"][annotation_to_ref(wildcards.annotation)]["genome"],
		annotation_db = lambda wildcards: config["ref_dir"] + re.sub('\.(gff3|gtf|bed)$', '.db', config["references"][annotation_to_ref(wildcards.annotation)]["genome_annotation"])
	output: config["ref_dir"] + "{annotation}.{feature}.fa"
	run:
		import gffutils
		from Bio import SeqIO
		fasta = SeqIO.to_dict(SeqIO.parse(input.genome, "fasta"))
		gff = gffutils.FeatureDB(input.annotation_db)
		output_file = open(output[0], 'w')

		for feature in gff.features_of_type(wildcards.feature, order_by="start"):
			output_file.write(">" + feature['ID'][0] + "\n")
			for exon in gff.children(feature, featuretype='exon', order_by='start'):
				output_file.write(str(fasta[feature.seqid].seq)[exon.start-1:exon.stop])
			output_file.write("\n")

		output_file.close()
