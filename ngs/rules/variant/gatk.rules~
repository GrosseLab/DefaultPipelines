
rule mark_duplicates:
    """Marks duplicate fragments."""
    input: "{prefix}/{unit}.bam"
    output: bam = "{prefix}/{unit}_dedup.bam",
            metrics = "{prefix}/dedup_metrics/{unit}_dedup.report"
    shell: "java -Xmx40g -jar /usr/local/bin/picard-tools-1.119/MarkDuplicates.jar INPUT={input} OUTPUT={output.bam} METRICS_FILE={output.metrics}"

# TODO add known databases
rule realign_info:
   """Determines critical regions for realignment."""
    input: bam = "results/mapping/{reference}/{unit}_dedup.bam",
           bai = "results/mapping/{reference}/{unit}_dedup.bam.bai",
           ref = lambda wildcards: config["references"][wildcards.reference]
    output: "results/mapping/{reference}/{unit}_realign_intervals.list"
    threads: 10
    shell: "java -Xmx50g -jar /usr/local/bin/GenomeAnalysisTK-3.2-2/GenomeAnalysisTK.jar "
           "-T RealignerTargetCreator "
           "-nt {threads} "
           "-R {input.ref} "
           "-I {input.bam} "
           "-o {output}"

# TODO add known databases
rule realign_reads:
    """Realigns reads on critical regions."""
    input: bam = "results/mapping/{reference}/{unit}_dedup.bam",
           bai = "results/mapping/{reference}/{unit}_dedup.bam.bai",
           ref = lambda wildcards: config["references"][wildcards.reference],
           interval = "results/mapping/{reference}/{unit}_realign_intervals.list"
    output: "results/mapping/{reference}/{unit}_realign.bam"
    shell: "java -Xmx50g -jar /usr/local/bin/GenomeAnalysisTK-3.2-2/GenomeAnalysisTK.jar "
           "-T IndelRealigner "
           "--disable_bam_indexing "
           "-R {input.ref} "
           "-I {input.bam} "
           "-targetIntervals {input.interval} "
           "-o {output}"

# TODO add known databases
rule recalibrate_info:
    input: ref = lambda wildcards: config["references"][wildcards.reference],
           bam = "results/mapping/{reference}/{unit}.bam",
           bai = "results/mapping/{reference}/{unit}.bam.bai"
    output: "results/mapping/{reference}/{unit}_recalibrate.grp")
    log:
        "results/mapping/log/{reference}/{unit}_recalibrate_info.log"
    threads: 8
    shell:
        "gatk -T BaseRecalibrator -R {input.ref} "
        "-nct {threads} "
        "-I {input.bam} "
        "-o {output} >& {log}"

rule recalibrate_bam:
    input: ref = lambda wildcards: config["references"][wildcards.reference],
           bam = "results/mapping/{reference}/{prefix}.bam",
           grp = "results/mapping/{reference}/{prefix}_recalibrate.grp"
    output: "results/mapping/{reference}/{prefix}_recalibrated.bam"
    log: "results/mapping/log/{reference}/{prefix}_recalibrate.log"
    threads: 8
    shell:
        "gatk -T PrintReads -R {input.ref} "
        "-nct {threads} "
        "--disable_bam_indexing "
        "-I {input.bam} -BQSR {input.grp} "
        "-o {output} >& {log}"

rule call_snps:
    
