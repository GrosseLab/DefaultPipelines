#############################################################################
#          Rules to map fastq reads to a fasta reference using bwa.         #
#                                                                           #
# Date: 02.01.2015                                                          #
#                                                                           #
#############################################################################

# dictionary to get the sample assigned to a unit
UNIT_TO_SAMPLE = {
    unit: sample for sample, units in config["samples"].items()
    for unit in units }

BWA_INDEX_SUFFIXES = [ "", ".amb", ".ann", ".bwt", ".pac", ".sa" ]

rule bwa_index:
    """Creates an index of a fasta file."""
    input: "{prefix}.fa"
    output: expand("{{prefix}}.fa{suf}", suf = BWA_INDEX_SUFFIXES)
    shell: "bwa index {input}"

rule bwa_mem_map:
    """Maps reads specified in the config file (of a given kind (e.g. raw or trimmed)) on a reference sequence."""
    input:
        ref = lambda wildcards: config["ref_dir"] + config["references"][wildcards.genome],
        bwaindex = lambda wildcards: expand(config["ref_dir"] + config["references"][wildcards.genome] + "{suf}", suf = BWA_INDEX_SUFFIXES),
        fastqs = lambda wildcards: expand("data/reads/" + wildcards.kind + "/{file}", file = config["units"][wildcards.unit]),

    output:
        "results/mapping/bwa/{genome}/{kind}/{unit}.bam"
    params:
        sample = lambda wildcards: UNIT_TO_SAMPLE[wildcards.unit]
    log: 
        "results/mapping/bwa/{genome}/{kind}/log/{unit}_bwa_mem.log"
    threads: 19
    shell: "bwa mem -M " # picard compatibility
           "-R '@RG\\tID:{wildcards.unit}\\t"
           "SM:{params.sample}\\tPL:{config[platform]}' "
           "-t {threads} {input.ref} {input.fastqs} 2> {log} "
           "| samtools view -Sbh - > {output}"
