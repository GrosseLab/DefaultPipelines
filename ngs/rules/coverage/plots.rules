#############################################################################
#          Rules to generate coverage plots.                                #
#                                                                           #
# Date: 02.01.2015                                                          #
#                                                                           #
#############################################################################

from snakemake.utils import R

ruleorder: plot_hist > plot_regions

rule plot_regions:
    """Produces coverage plots for each gene in the manifest file."""
    input: expand("results/coverage/{{mapper}}/{{ref}}/{{kind}}/{unit}_" + config["platform"] + "_" + config["manifest"] + "_20_20.cov", unit = config["units"].keys() )
    output: "plots/coverage/{mapper}/{ref}/{kind}/{anyregion}.pdf"
    run: 
      files = "c({})".format(",".join(map( lambda str: '"' + str + '"', input))),
      mapper = wildcards.mapper,
      ref = wildcards.ref,
      kind = wildcards.kind,
      platform = config["platform"],
      manifest = config["manifest"],
      left = "20",
      right = "20",
      run = config["run"],
      R("""
      library(ggplot2)
      library(data.table)

      files <- {files}
      labels <- sub( '_.*', "", basename(files)) # extract sample names
      coverages<-list()
      for (i in seq_along(files)) {{
        coverages[[i]] <- fread(files[i], sep="\t")
        coverages[[i]] <- cbind( labels[i], coverages[[i]])
        setnames(coverages[[i]], c("Sample", "Chromosome", "Start", "End", "FeatureRegion", "Position", "Coverage"))
      }}

      dt <- do.call('rbind', coverages)
      dt[,Region := sub(".*?-", "", dt[,FeatureRegion])] # delete gene name (? activates non-greedy evaluation of regex)
      dt[,Feature := sub("-.*", "", dt[,FeatureRegion])] # delete coordinates
      dt[,Position := dt[,Position - {left}]]

      setkey(dt, Feature)

      setwd('plots/coverage/{mapper}/{ref}/{kind}/')

      for (f in unique( dt[,Feature] ) ) {{
      filename <- paste(f, ".pdf", sep = '')
      cat(paste("Plotting", filename))
      features <- dt[f,]

      p <- ggplot( data = features, aes( x = Position, y = Coverage, colour = Sample ))
      p <- p + geom_line() + geom_hline( aes(yintercept = 100)) 
      
      p <- p + geom_vline( xintercept = 0.5, colour="grey", linetype = "longdash" )
      p <- p + geom_vline( aes( xintercept = End - Start - {left} - {right} + 0.5 ), colour="grey", linetype = "longdash" )
      #p <- p + scale_x_continuous( 'Position' , aes(breaks = c(1, End - Start - 1)))
      p <- p + facet_wrap( ~ Region, scales = 'free_x' )
      p <- p + ggtitle( paste('Coverage of target regions in', f, 'on', features[1,Chromosome], 'in {ref}, run: {run}') )
      p <- p + theme( plot.title = element_text( face = 'bold', vjust = 2 ) )
      
      p2 <- p + scale_y_log10(limits = c(1, 20000), breaks = 10^(1:4))

      pdf(filename, width = 10, height = 10)
      print(p)
      print(p2)
      dev.off()

      # ggsave( file = filename, plot = p, width = 10, height = 10)      
      }}
      """)


rule plot_hist:
    """Produces a summary plot of target coverage."""
    input: expand("results/coverage/{{mapper}}/{{ref}}/{{kind}}/{unit}_" + config["platform"] + "_" + config["manifest"] + "_20_20.hist", unit = config["units"].keys() )
    output: "plots/coverage/{mapper}/{ref}/{kind}/Total.pdf"
    priority: 20
    run:
      files = "c({})".format(",".join(map( lambda str: '"' + str + '"', input))),
      mapper = wildcards.mapper,
      ref = wildcards.ref,
      kind = wildcards.kind,
      platform = config["platform"],
      manifest = config["manifest"],
      left = "20",
      right = "20",
      run = config["run"],
      R("""
      library(ggplot2)

      files <- {files}
      labels <- sub( '_.*', "", files) # extract sample names
      cov <- list()

      for (i in seq_along(files)) {{
      cov[[i]] <- read.table(files[i], sep="\t")
      cov[[i]] <- cov[[i]][,c(-1, -4)] # drop first column
      cov[[i]] <- cbind( cov[[i]], 1 - cumsum( cov[[i]][,3] ) ) # add cummulative frequency of depth
      cov[[i]] <- cbind( labels[i], cov[[i]]) # add label column
      }}
      
      df <- do.call('rbind', cov)
      colnames(df) <- c('Sample', 'Depth', 'Count', 'Frequency', 'CumFrequency')

      setwd('plots/coverage/{mapper}/{ref}/{kind}/')

      p <- ggplot( data = df, aes( x = Depth, y = CumFrequency, colour = Sample ) ) 
      p <- p + geom_line() + xlim(0, 500) + ylim(0.7, 1.0)
      p <- p + geom_vline( xintercept = c(20,50,100), linetype = "longdash" )
      p <- p + ggtitle("Coverage distribution in run {run} using {ref}") + xlab("Depth of coverage") 
      p <- p + ylab( sprintf("Fraction of target bases with a coverage >= depth" ) )
      ggsave( file = "Total.pdf", plot = p, width = 10, height = 10, title = "Coverage distribution of target regions" )
      """)
