#############################################################################
#          Rules to generate coverage files given bed features.             #
#                                                                           #
# Date: 02.01.2015                                                          #
#                                                                           #
#############################################################################

rule target_coverage:
    """Compute per base coverage of sequenced regions."""
    input:
        config["ref_dir"] + "/{platform}/{ref}/kits/{manifest}_ensemble_{bef}_{aft}.bed",
        lambda wildcards: expand("results/mapping/" + wildcards.mapper + "/" + wildcards.ref + "/" + wildcards.kind + "/{unit}.bam", unit = config["samples"][wildcards.sample])           
    output: "results/coverage/{mapper}/{ref}/{kind}/{sample}_{platform}_{manifest}_{bef}_{aft}.cov"
    shell: "samtools merge - {input} | /usr/local/bin/bedtools coverage -split -d -abam stdin -b {input[0]} > {output}"

rule target_bad_coverage:
    """Only output Regions under a given covergae"""
    input: "results/coverage/{mapper}/{ref}/{kind}/{unit}_{platform}_{manifest}_{bef}_{aft}.cov"
    output: "results/coverage/{mapper}/{ref}/{kind}/{unit}_{platform}_{manifest}_{bef}_{aft}.lower{mincov}"
    shell: "cat {input} | awk '$6 < {wildcards.mincov}' > {output}"

rule target_coverage_hist:
    """Compute per base coverage of sequenced regions."""
    input: bam = "results/mapping/{mapper}/{ref}/{kind}/{unit}.bam",
           manifest = config["ref_dir"] + "/{platform}/{ref}/kits/{manifest}_ensemble_{bef}_{aft}.bed" 
    output: "results/coverage/{mapper}/{ref}/{kind}/{unit}_{platform}_{manifest}_{bef}_{aft}.hist"
    shell: "/usr/local/bin/bedtools coverage -hist -abam {input.bam} -b {input.manifest} | grep ^all > {output}"
